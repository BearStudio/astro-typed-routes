import type { AstroIntegrationLogger } from "astro";
import type { ViteDevServer } from "vite";
import fs from "node:fs";
import path from "node:path";

const matchCatchAll = /\[\.\.\..*\]/;
const matchDynamic = /\[.*\]/;

const getKey = (itemName: string) => {
  // Handle [...name] => :name*
  if (matchCatchAll.test(itemName)) {
    const inner = itemName.slice(1, -1).replaceAll(".", "");

    return `:${inner}`;
  }

  // Handle  [name] => :name, [__image].[__type] => :__image.:__type
  if (matchDynamic.test(itemName)) {
    return itemName
      .split(".")
      .map((part) =>
        part.startsWith("[") && part.endsWith("]")
          ? `:${part.slice(1, -1)}`
          : part
      )
      .join(".");
  }

  return itemName;
};

export const generateRoutes = ({
  logger,
  server,
}: {
  logger: AstroIntegrationLogger;
  server: ViteDevServer;
}) => {
  const __dirname = server.config.root;

  try {
    const readDirectory = (dirPath: string) => {
      const result: Record<string, unknown> = {};
      const items = fs.readdirSync(dirPath, { withFileTypes: true });

      items.forEach((item) => {
        if (item.isDirectory()) {
          // (name) => Ignore the level in the object
          if (item.name.match(/^\(.*\)$/)) {
            const subResult = readDirectory(`${dirPath}/${item.name}`);
            Object.assign(result, subResult);
          } else {
            result[getKey(item.name)] = readDirectory(
              `${dirPath}/${item.name}`
            );
          }
        } else if (item.isFile()) {
          // Skip index files
          if (item.name.startsWith("index.")) return;
          // Remove extension from file name
          const fileNameWithoutExt = item.name.replace(/\.[^.]+$/, "");
          result[getKey(fileNameWithoutExt)] = {};
        }
      });

      return result;
    };

    const routes = readDirectory(path.resolve(__dirname, "src/pages"));
    const outputPath = path.resolve(__dirname, "src/routes.gen.ts");
    const routesContent = `
// This file was automatically generated by @bearstudio/astro-typed-routes
// You should NOT make any changes in this file as it will be overwritten.

import { assignPaths } from '@bearstudio/astro-typed-routes';

const ROUTES_CONFIG = ${JSON.stringify(routes, null, 2)} as const;

export const ROUTES = assignPaths(ROUTES_CONFIG);
`;
    fs.writeFileSync(outputPath, routesContent);

    logger.info("Routes generated");
  } catch (error) {
    logger.error(`Failed to generate routes; ${error}`);
    throw new Error();
  }
};
